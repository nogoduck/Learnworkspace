/* display : flex => 기준 : 가로
W
justify-content(기준을 중심삼아 각 요소간에 위치 선정가능)
flex-start: 컨테이너 앞
flex-start: 컨테이너 뒤
center:컨테이너 중앙
--- 잘 안쓰는 요소 : baseline(컨테이너의 시작 위치에 정렬) / stretch(컨테이너에 맞게 늘림
############################################

align-content(세로축을 기준삼아) / align-item

flex-direction:각 요소의 정렬을 바꿀 수 있다
가로 -> 세로 









*/

body,
html {
  margin: 0px;
  height: 100%;
}
.con {
  background: oldlace;
  /* .con의 부모클래스의 높이에 맞추겠다는 의미다 */
  /* .con의 부모는 html 이다 */
  /* height: 100%; */
  /* 보이는 viewport의 100%를 쓰겠다는 의미다 */
  height: 100vh;
  /* flex박스 사용 */
  display: flex;
  /* 기본값 : row, 반대: row-reverse, 위에서아래: column, 위아래 반대: coloumn-reverse*/
  /* flex-direction: row; */
  /* nowrap이 기본값이하고 wrap은 크기가 줄어듬에 따라 아래 줄로 이동한다 */
  flex-wrap: wrap;
  flex-flow: row wrap;

  /* flex-start 기본값, 끝으로 이동flex-end, center 중앙이동, space-around 박스를 둘러싼 빈공간을 만든다(그래서 각각 맨끝에 있는 class들과 class들과의 빈공간이 다르다*/
  /* space-evenly : 모든 공간을 비슷하게 사용한다*/
  /* space-between : 각 끝을 제외한 모든 공간을 비슷하게 사용한다*/
  /* 중심축에서 아이템들을 배치한다 */
  justify-content: space-between;

  /* 크기가 다른 도형을 중심 라인에 맞춰 균일하게 한다 */
  align-items: baseline;

  /* 반대축에 아이템을 지정한다 */
  align-content: space-between;
}

.items {
  padding-top: 100px;
  background-color: beige;
  height: 100vh;
  display: flex;
}
.item {
  color: white;
  width: 80px;
  height: 80px;
  border: 2px solid black;
}

.item1 {
  /* padding: 20px; */
  /* order로 순서 지정가능 > 1부터 시작 */
  /* order: 3; */
  background-color: red;

  /* 화면의 비율이 바뀔때 얼마나 늘어나는지 지정한다 
  기본값: 0, ex)2, 1, 1 > 아이템1만 2배의 크기를 가진다 */
  /* flex-grow: 2; */
  /* grow와는 반대로 비율이 바뀔때 얼마나 줄어들지 지정 */
  /* flex-shrink: 2; */

  /* flex-basis: 아이템별로 비율을 나눈다 */
  /* flex-basis: 60%; */
  flex: 2 2 auto;
}
.item2 {
  background-color: orangered;
  /* flex-basis: 20%; */
  /* flex-grow: 1;
  flex-shrink: 1; */

  /* 아이템 각각의 특성을 지정가능하다 */
  /* align-self: center; */
}
.item3 {
  background-color: orange;
  /* flex-basis: 20%; */
  /* flex-grow: 1; */
  /* flex-shrink: 1; */
}
